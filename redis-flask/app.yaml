kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-storage-ignashov
  namespace: ignashov
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-for-redis
  namespace: ignashov
spec:
  capacity:
    storage: 512Mi
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: local-storage-ignashov
  local:
    path: /mnt/ignashov/redis-data
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - worker-192.168.0.5
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-for-redis
  namespace: ignashov
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: local-storage-ignashov
  resources:
    requests:
      storage: 512Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
  namespace: ignashov
spec:
  replicas: 2
  selector:
    matchLabels:
      app: flask-app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app
        image: imsolty/flask-app-test:1.0.3
        env:
        - name: REDIS_HOST
          value: "redis-app-service.ignashov.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        imagePullPolicy: IfNotPresent
        ports:
        - name: flask-port
          containerPort: 5000
          protocol: TCP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-app
  namespace: ignashov
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-app
  template:
    metadata:
      labels:
        app: redis-app
    spec:
      containers:
      - name: redis-app
        image: redis:bookworm
        command: ["redis-server", "--dir", "/data"]
        imagePullPolicy: IfNotPresent
        ports:
        - name: redis-port
          containerPort: 6379
          protocol: TCP
        volumeMounts:
        - name: redis-storage
          mountPath: /data
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: pvc-for-redis
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis-app
  name: redis-app-service
  namespace: ignashov
spec:
  ports:
  - name: redis-app
    port: 6379
    targetPort: redis-port
    protocol: TCP
  selector:
    app: redis-app
  type: ClusterIP